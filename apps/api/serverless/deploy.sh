#!/bin/sh
set -e

writeConfigFile () {
    configFile="apps/cloud/src/app/modules/custom/components/auth/aws-exports.js"
    echo "// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten." > ${configFile}
    echo "" >> ${configFile}
    echo "const awsmobile = ${FRONT_END_CONFIG};" >> ${configFile}
    echo "" >> ${configFile}
    echo "export default awsmobile;" >> ${configFile}
    echo "" >> ${configFile}
}

updateBackendEnvironmentVariables () {
  echo 'Update backend environment variables'

  ENVIRONMENT_FILENAME=./libs/environment/src/environments/environment
  API_URL_LOCAL=http://localhost:3000

  API_URL_PROD=$(aws cloudformation describe-stacks --stack-name $PROTOTYPE_STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`ServiceEndpoint`].OutputValue' --output text)
  O="${API_URL_LOCAL}" N="${API_URL_PROD}" perl -pi -e's/\Q$ENV{O}/$ENV{N}/g' "${ENVIRONMENT_FILENAME}.ts"
  O="${API_URL_LOCAL}" N="${API_URL_PROD}" perl -pi -e's/\Q$ENV{O}/$ENV{N}/g' "${ENVIRONMENT_FILENAME}.prod.ts"

  cat "${ENVIRONMENT_FILENAME}.ts"
  cat "${ENVIRONMENT_FILENAME}.prod.ts"
}

echo 'Set environment variables'

export API_NAME=sls-${PROJECT_NAME}-api
export LAMBDA_KAPI_DB_PATH=${EFS_MOUNT_PATH}/${ACCOUNT_ID}/${PRODUCT_ID}/
export LAMBDA_KAPI_NAME=sls-${PROJECT_NAME}-lambda

echo 'Set front-end config'

[[ ${FRONT_END_CONFIG} ]] && writeConfigFile

echo "Build backend"

npm run build:api:prod

echo "Copy backend assets"

cd dist/apps/api
[ -d "apps/api/src/assets" ] && cp -a apps/api/src/assets dist/apps/api

echo "Zip and deploy backend to S3"

zip -qdgds 10m -r kapi-lambda.zip .

cd -

set +e
aws s3 rm s3://deploy-input-${ENV}/${CL_DB_FILE_KEY}
set -e

npx serverless deploy

updateBackendEnvironmentVariables

echo 'Initialize and auto generate fake data'

# This call invoke the created lambda function to perform the database creation
curl --location --request POST \
    "${API_URL_PROD}/graphql?operationName=tryToCreateDatabase" \
    --header 'Auth: allow' \
    --header 'Content-Type: application/x-www-form-urlencoded' \
    --data-urlencode 'operations={}' \
    --data-urlencode 'source=deploy'

echo 'Update frontend environment variables'

echo "Build frontend"

npm run build:prod

echo "Deploy frontend to S3"

set +e
aws s3 rm s3://${BUCKET_NAME} --recursive
aws s3 cp dist/apps/cloud s3://${BUCKET_NAME} --recursive
set -e

echo "Invalidate Cloudfront distribution"

CLOUDFRONT_DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name $PROTOTYPE_STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`FrontPageCloudFrontDistributionId`].OutputValue' --output text)
aws cloudfront create-invalidation \
    --distribution-id "${CLOUDFRONT_DISTRIBUTION_ID}" \
    --paths "/*"

exit 0
